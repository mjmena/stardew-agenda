{"version":3,"sources":["components/CropImage.js","EventImage.js","EventDisplay.js","Day.js","Season.js","form/NumberInput.js","form/FertilizerRadio.js","utils/CropPlan.js","form/PlanDetails.js","form/useAmountState.js","form/CropSelect.js","CreateCropPlanForm.js","UpdateCropPlanForm.js","PlanEditor.js","components/Drawer.js","utils/planReducer.js","utils/useCropPlanReducer.js","Calendar.js","App.js","index.js"],"names":["CropImage","props","src","seed","concat","crop","id","react_default","a","createElement","alt","name","width","EventImage","event","type","height","React","memo","_ref","Fragment","components_CropImage","quantity","src_EventImage","StyledDay","styled","div","withConfig","displayName","componentId","selected","StyledDayTitle","StyledEvents","StyledEvent","day","actions","setDay","onClick","e","map","action","key","src_EventDisplay","SeasonStyles","Title","Header","Block","Container","header","season","current_day","plans","body","useMemo","range","start","flatMap","plan","getCropActionsOnDate","reduce","uniques","unique","get","set","Map","values","src_Day","Object","toConsumableArray","value","handleValue","_ref$isNullable","isNullable","_ref$max","max","Number","MAX_SAFE_INTEGER","attrs","objectWithoutProperties","assign","isInteger","onChange","number","parseInt","target","replace","isNaN","tag","handleChange","useCallback","fertilizers","fertilizer_radios","fertilizer","index","checked","htmlFor","CropPlan","_this","this","_ref$replant","replant","start_date","end_date","classCallCheck","shouldReplant","growth","isPlantDate","date","getCropGrowth","regrowth","isHarvestDate","getAction","isPlant","isHarvest","split","_ref2","objectSpread","undefined","debug","stringy","console","log","JSON","stringify","end","planA","planB","compare","Error","same","start_date_compare","crop_compare","localeCompare","fertilizer_compare","end_date_compare","handleSubmit","_useAmountState","price","reducer","state","Math","floor","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","updateQuantity","updated_quantity","updatePrice","updated_price","useAmountState","buy","_useAmountState2","setQuantity","setPrice","_useState","useState","_useState2","setFertilizer","_useState3","_useState4","setReplant","submit","preventDefault","toggleReplant","onSubmit","form_NumberInput","form_FertilizerRadio","crops","crop_options","findIndex","none","createPlan","filtered_crops","filter","setCrop","form_CropSelect","form_PlanDetails","updatePlan","deletePlan","updated_plan","remove","editable_plans","UpdateCropPlanForm","src_CreateCropPlanForm","StyledDrawer","StyledHandle","StyledContent","visible","container","document","onOpen","onClose","children","useEffect","appendChild","handleToggle","ReactDOM","createPortal","created_plan","same_plan","new_state","merge","sort","deleted_plan","equal","planReducer","new_plan","old_plan","useCropPlanReducer","initialState","arguments","length","seasons","Calendar","setSeason","_useCropPlanReducer","_useCropPlanReducer2","_useState5","_useState6","setVisible","open","close","src_Season","components_Drawer","src_PlanEditor","App","Component","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.526bac74.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CropImage = props => {\n  let src;\n  if (props.seed) src = `/images/seeds/${props.crop.id}.png`;\n  else src = `/images/crops/${props.crop.id}.png`;\n  return <img src={src} alt={props.crop.name} width={20} />;\n};\nexport default CropImage;\n","import React from \"react\";\n\nconst EventImage = props => {\n  let src;\n  if (props.event.type === \"festival\") src = `/images/events/festival.gif`;\n  else src = `/images/events/${props.event.id}.png`;\n  return <img src={src} alt={props.name} height={10} />;\n};\nexport default EventImage;\n","import React from \"react\";\nimport CropImage from \"./components/CropImage\";\nimport EventImage from \"./EventImage\";\n\nconst EventDisplay = ({ event }) => {\n  if (\n    event.type === \"plant\" ||\n    event.type === \"replant\" ||\n    event.type === \"harvest\"\n  )\n    return (\n      <>\n        <CropImage crop={event.crop} seed={event.type === \"plant\"} />\n        <span>x{event.quantity}</span>\n      </>\n    );\n  else\n    return (\n      <>\n        <EventImage event={event} />\n        {event.name}\n      </>\n    );\n};\n\nexport default React.memo(EventDisplay);\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport EventDisplay from \"./EventDisplay\";\n\nlet StyledDay = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-flow: column nowrap;\n  background-color: ${props => (props.selected ? \"blue\" : \"none\")};\n`;\n\nconst StyledDayTitle = styled.div`\n  height: 35px;\n`;\n\nconst StyledEvents = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: start;\n  overflow: auto;\n`;\n\nconst StyledEvent = styled.div`\n  flex: 1;\n`;\n\nfunction Day({ day, selected, actions, setDay }) {\n  function handleClick(e) {\n    setDay(day);\n  }\n\n  return (\n    <StyledDay selected={selected} onClick={handleClick}>\n      <StyledDayTitle>{(day + 1) % 28}</StyledDayTitle>\n      <StyledEvents>\n        {actions.map(action => (\n          <StyledEvent key={action.id}>\n            <EventDisplay event={action} />\n          </StyledEvent>\n        ))}\n      </StyledEvents>\n    </StyledDay>\n  );\n}\n\nexport default React.memo(Day);\n","import React, { useMemo } from \"react\";\nimport range from \"lodash/range\";\nimport styled from \"styled-components/macro\";\nimport Day from \"./Day\";\nimport { css } from \"emotion\";\n\nconst day_names = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\"\n];\n\nconst SeasonStyles = {\n  Title: styled.div`\n    text-align: center;\n  `,\n  Header: styled.div`\n    flex: 1;\n    height: 50px;\n  `,\n  Block: styled.div`\n    flex: 1;\n    height: 100px;\n  `,\n  Container: styled.div`\n    display: flex;\n    flex-flow: wrap row;\n  `\n};\n\nconst { Title, Header, Block, Container } = SeasonStyles;\n\nconst header = day_names.map(day => <Header key={day}>{day}</Header>);\n\nfunction Season({ season, day: current_day, plans, setDay }) {\n  const body = useMemo(\n    () =>\n      range(season.start, season.start + 28).map(day => {\n        const actions = plans\n          .flatMap(plan => plan.getCropActionsOnDate(day))\n          .reduce((uniques, action) => {\n            const unique = uniques.get(action.id);\n            if (unique) {\n              unique.quantity += action.quantity;\n            } else {\n              uniques.set(action.id, action);\n            }\n            return uniques;\n          }, new Map())\n          .values();\n\n        return (\n          <Block key={day}>\n            <Day\n              key={day}\n              day={day}\n              selected={day === current_day}\n              actions={[...actions]}\n              setDay={setDay}\n            />\n          </Block>\n        );\n      }),\n    [season, current_day, plans]\n  );\n\n  return (\n    <Container>\n      <Title>{season.name}</Title>\n      {header}\n      {body}\n    </Container>\n  );\n}\n\nexport default React.memo(Season);\n","import React from \"react\";\n\n// A Input for positive numbers that can be null\n// Useful for inputs with a placeholder\nfunction NumberInput({\n  value,\n  handleValue,\n  isNullable = true,\n  max = Number.MAX_SAFE_INTEGER,\n  ...attrs\n}) {\n  function handleChange(e) {\n    const number = Number.parseInt(e.target.value.replace(/\\D/, \"\"), 10);\n\n    if (Number.isNaN(number)) {\n      handleValue(isNullable ? null : 0);\n    } else {\n      handleValue(number < max ? number : max);\n    }\n  }\n\n  return (\n    <input\n      type=\"text\"\n      value={Number.isInteger(value) ? value : \"\"}\n      onChange={handleChange}\n      {...attrs}\n    />\n  );\n}\n\nexport default React.memo(NumberInput);\n","import React, { useCallback } from \"react\";\nimport fertilizers from \"../data/fertilizers\";\n\nfunction FertilizerRadio({ value, handleValue, tag }) {\n  const handleChange = useCallback(\n    e => handleValue(fertilizers[e.target.value]),\n    []\n  );\n\n  const fertilizer_radios = fertilizers.map((fertilizer, index) => (\n    <React.Fragment key={fertilizer.id}>\n      <input\n        type=\"radio\"\n        id={fertilizer.id + \"-\" + tag}\n        name={\"fertilizer-\" + tag}\n        value={index}\n        checked={fertilizer === value}\n        onChange={handleChange}\n      />\n      <label htmlFor={fertilizer.id + \"-\" + tag}>{fertilizer.name}</label>\n    </React.Fragment>\n  ));\n\n  return <>{fertilizer_radios}</>;\n}\n\nexport default React.memo(FertilizerRadio);\nexport const none = fertilizers[0];\n","export default class CropPlan {\n  constructor({\n    crop,\n    fertilizer,\n    quantity,\n    replant = false,\n    start_date,\n    end_date\n  }) {\n    Object.assign(this, {\n      crop,\n      fertilizer,\n      quantity,\n      start_date: start_date,\n      end_date:\n        replant || crop.regrowth\n          ? crop.end\n          : replant === false\n            ? start_date + CropPlan.getCropGrowth(crop, fertilizer)\n            : end_date\n    });\n  }\n\n  static getCropGrowth(crop, fertilizer) {\n    return crop.growth;\n  }\n\n  static merge(planA, planB) {\n    if (CropPlan.compare(planA, planB))\n      throw new Error(\n        \"Plans must have equal dates, crop, and fertilizer to merge\"\n      );\n    const { quantity, ...same } = planA;\n    return new CropPlan({ quantity: quantity + planB.quantity, ...same });\n  }\n\n  // Compares data that cannot be merged - i.e. dates, crop, and fertilizer\n  static compare(planA, planB) {\n    const start_date_compare = planA.start_date - planB.start_date;\n    const crop_compare = planA.crop.id.localeCompare(planB.crop.id);\n    const fertilizer_compare = planA.fertilizer.id.localeCompare(\n      planB.fertilizer.id\n    );\n    const end_date_compare = planA.end_date - planB.end_date;\n\n    if (start_date_compare > 0) return 1;\n    else if (start_date_compare < 0) return -1;\n    else if (crop_compare > 0) return 1;\n    else if (crop_compare < 0) return -1;\n    else if (fertilizer_compare > 0) return 1;\n    else if (fertilizer_compare < 0) return -1;\n    else if (end_date_compare > 0) return 1;\n    else if (end_date_compare < 0) return -1;\n    else return 0;\n  }\n\n  static equal(planA, planB) {\n    const isSame = CropPlan.compare(planA, planB) === 0;\n    return isSame && planA.quantity - planB.quantity === 0;\n  }\n\n  shouldReplant = () => {\n    return this.start_date + this.crop.growth !== this.end_date;\n  };\n\n  get id() {\n    return `${this.crop.id}-${this.fertilizer.id}-${this.quantity}-(${\n      this.start_date\n    }-${this.end_date})`;\n  }\n\n  isPlantDate = date => {\n    const growth = CropPlan.getCropGrowth(this.crop, this.fertilizer);\n    const inPlan = this.start_date <= date && date + growth <= this.end_date;\n\n    return (\n      inPlan &&\n      (this.crop.regrowth\n        ? date === this.start_date\n        : (date - this.start_date) % growth === 0)\n    );\n  };\n\n  isHarvestDate = date => {\n    const growth = CropPlan.getCropGrowth(this.crop, this.fertilizer);\n    const inPlan = this.start_date <= date - growth && date <= this.end_date;\n\n    return (\n      inPlan &&\n      (this.crop.regrowth\n        ? date === this.start_date + growth ||\n          (date - this.start_date - growth) % this.crop.regrowth === 0\n        : (date - this.start_date - growth) % growth === 0)\n    );\n  };\n\n  getAction = type => ({\n    id: `${type}-${this.crop.id}`,\n    type: type,\n    crop: this.crop,\n    quantity: this.quantity\n  });\n\n  getCropActionsOnDate = date => {\n    const isPlant = this.isPlantDate(date);\n    const isHarvest = this.isHarvestDate(date);\n    if (isPlant && isHarvest)\n      return [this.getAction(\"plant\"), this.getAction(\"harvest\")];\n    else if (isPlant) return [this.getAction(\"plant\")];\n    else if (isHarvest) return [this.getAction(\"harvest\")];\n    else return [];\n  };\n\n  split = (date, { fertilizer, quantity, replant }) => {\n    const before = new CropPlan({ ...this, end_date: date });\n    const after = new CropPlan({\n      start_date: date,\n      fertilizer: fertilizer || this.fertilizer,\n      crop: this.crop,\n      quantity: quantity || this.quantity,\n      replant: replant === undefined ? this.shouldReplant() : replant\n    });\n    return [before, after];\n  };\n\n  debug = () => {\n    const stringy = { ...this };\n    stringy.fertilizer = this.fertilizer.id;\n    stringy.crop = this.crop.id;\n    console.log(JSON.stringify(stringy, null, 2));\n  };\n}\n","import React, { useState, useCallback } from \"react\";\nimport useAmountState from \"./useAmountState\";\nimport NumberInput from \"./NumberInput\";\nimport FertilizerRadio from \"./FertilizerRadio\";\nimport CropPlan from \"../utils/CropPlan\";\n\nfunction PlanDetails({ date, plan, handleSubmit }) {\n  const [quantity, price, setQuantity, setPrice] = useAmountState(\n    plan.quantity,\n    plan.crop.buy\n  );\n  const [fertilizer, setFertilizer] = useState(plan.fertilizer);\n  const [replant, setReplant] = useState(plan.shouldReplant());\n\n  const submit = useCallback(e => {\n    e.preventDefault();\n    handleSubmit(\n      new CropPlan({\n        crop: plan.crop,\n        quantity,\n        fertilizer,\n        replant,\n        start_date: date\n      })\n    );\n  });\n\n  const toggleReplant = useCallback(e => setReplant(!replant), [replant]);\n\n  return (\n    <form onSubmit={submit}>\n      <NumberInput value={quantity} handleValue={setQuantity} />\n      <NumberInput value={price} handleValue={setPrice} />\n      <FertilizerRadio\n        value={fertilizer}\n        handleValue={setFertilizer}\n        tag={plan.id}\n      />\n      {!plan.crop.regrowth && (\n        <input type=\"checkbox\" checked={replant} onChange={toggleReplant} />\n      )}\n      <button>Submit</button>\n    </form>\n  );\n}\n\nexport default React.memo(PlanDetails);\n","import { useReducer, useCallback } from \"react\";\n\nexport default function useAmountState(quantity, price) {\n  const reducer = useCallback(\n    (state, action) => {\n      switch (action.type) {\n        case \"price\":\n          return {\n            price: action.price,\n            quantity: Math.floor(action.price / price)\n          };\n        case \"quantity\":\n          return { price: price * action.quantity, quantity: action.quantity };\n        default:\n          return state;\n      }\n    },\n    [price]\n  );\n\n  const [state, dispatch] = useReducer(reducer, {\n    quantity,\n    price: quantity * price\n  });\n\n  const updateQuantity = useCallback(updated_quantity =>\n    dispatch({ type: \"quantity\", quantity: updated_quantity })\n  );\n\n  const updatePrice = useCallback(updated_price =>\n    dispatch({ type: \"price\", price: updated_price })\n  );\n\n  return [state.quantity, state.price, updateQuantity, updatePrice];\n}\n","import React from \"react\";\n\nfunction CropSelect({ value, handleValue, crops }) {\n  const handleCropChange = e => {\n    handleValue(crops[e.target.value]);\n  };\n\n  const crop_options = crops.map((crop, index) => (\n    <option key={crop.id} value={index}>\n      {crop.name}\n    </option>\n  ));\n\n  const index = crops.findIndex(crop => crop === value);\n\n  return (\n    <select onChange={handleCropChange} value={index}>\n      <option key={-1} value={-1}>\n        Select a Crop\n      </option>\n      {crop_options}\n    </select>\n  );\n}\n\nexport default React.memo(CropSelect);\n","import React, { useState, useMemo } from \"react\";\nimport crops from \"./data/crops\";\nimport PlanDetails from \"./form/PlanDetails\";\nimport CropSelect from \"./form/CropSelect\";\nimport fertilizers from \"./data/fertilizers\";\n\nconst none = fertilizers[0];\nfunction CreateCropPlanForm({ date, createPlan }) {\n  const filtered_crops = useMemo(\n    () =>\n      crops.filter(\n        crop => date >= crop.start && date + crop.growth <= crop.end\n      ),\n    [date]\n  );\n\n  const [crop, setCrop] = useState(null);\n  const plan = {\n    id: \"create\",\n    crop,\n    quantity: 1,\n    fertilizer: none,\n    shouldReplant: () => false\n  };\n\n  return (\n    <>\n      <CropSelect value={crop} handleValue={setCrop} crops={filtered_crops} />\n      {crop && (\n        <PlanDetails\n          key={crop.id}\n          date={date}\n          plan={plan}\n          handleSubmit={createPlan}\n        />\n      )}\n    </>\n  );\n}\n\nexport default React.memo(CreateCropPlanForm);\n","import React, { useCallback } from \"react\";\nimport PlanDetails from \"./form/PlanDetails\";\n\nfunction UpdatePlanForm({ date, plan, updatePlan, deletePlan }) {\n  const submit = useCallback(updated_plan => updatePlan(plan, updated_plan), [\n    plan\n  ]);\n\n  const remove = useCallback(() => deletePlan(plan), [plan]);\n\n  return (\n    <>\n      {plan.crop.name}\n      <PlanDetails date={date} plan={plan} handleSubmit={submit} />\n      <button onClick={remove}>Remove</button>\n    </>\n  );\n}\n\nexport default React.memo(UpdatePlanForm);\n","import React, { useMemo } from \"react\";\nimport CreateCropPlanForm from \"./CreateCropPlanForm\";\nimport UpdateCropPlanForm from \"./UpdateCropPlanForm\";\n\nfunction PlanEditor({ date, plans, createPlan, updatePlan, deletePlan }) {\n  const editable_plans = useMemo(\n    () =>\n      plans\n        .filter(plan => plan.isPlantDate(date))\n        .map(plan => (\n          <UpdateCropPlanForm\n            key={plan.id}\n            date={date}\n            plan={plan}\n            updatePlan={updatePlan}\n            deletePlan={deletePlan}\n          />\n        )),\n    [date, plans]\n  );\n\n  return (\n    <>\n      <CreateCropPlanForm date={date} createPlan={createPlan} />\n      {editable_plans}\n    </>\n  );\n}\n\nexport default React.memo(PlanEditor);\n","import React, { useEffect, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components/macro\";\n\nconst StyledDrawer = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100vw;\n  display: flex;\n  flex-flow: column nowrap;\n`;\nconst StyledHandle = styled.div`\n  align-self: center;\n  background-color: WhiteSmoke;\n`;\n\nconst StyledContent = styled.div`\n  display: ${props => (props.visible ? \"flex\" : \"none\")};\n  flex: 1;\n  padding: 5vh;\n  background-color: WhiteSmoke;\n`;\n\nconst container = document.createElement(\"div\");\nfunction Drawer({ visible, onOpen, onClose, children }) {\n  useEffect(() => {\n    document.body.appendChild(container);\n  }, []);\n\n  const handleToggle = useCallback(() => {\n    if (visible) onClose();\n    else onOpen();\n  });\n\n  return ReactDOM.createPortal(\n    <StyledDrawer>\n      <StyledHandle onClick={handleToggle}> handle</StyledHandle>\n      <StyledContent visible={visible}>{children}</StyledContent>\n    </StyledDrawer>,\n    container\n  );\n}\n\nexport default React.memo(Drawer);\n","import CropPlan from \"./CropPlan.js\";\n\nfunction planReducer(state, action) {\n  switch (action.type) {\n    case \"create\":\n      return createPlan(action.plan, state);\n    case \"update\":\n      return createPlan(action.new_plan, deletePlan(action.old_plan, state));\n    case \"delete\":\n      return deletePlan(action.plan, state);\n    default:\n      return state;\n  }\n}\n\nfunction createPlan(created_plan, state) {\n  const index = state.findIndex(\n    plan => CropPlan.compare(plan, created_plan) === 0\n  );\n\n  if (index >= 0) {\n    const same_plan = state[index];\n    const plans = state.filter(\n      plan => CropPlan.compare(plan, created_plan) !== 0\n    );\n    const merged_crop = CropPlan.merge(same_plan, created_plan);\n    const new_state = [merged_crop, ...plans];\n    new_state.sort(CropPlan.compare);\n    return new_state;\n  }\n\n  const new_state = [created_plan, ...state];\n  new_state.sort(CropPlan.compare);\n  return new_state;\n}\n\nfunction deletePlan(deleted_plan, state) {\n  return state.filter(plan => !CropPlan.equal(plan, deleted_plan));\n}\n\nexport default planReducer;\n","import { useReducer } from \"react\";\nimport planReducer from \"./planReducer\";\n\nfunction useCropPlanReducer(initialState = []) {\n  const [state, dispatch] = useReducer(planReducer, initialState);\n  const createPlanAction = plan => dispatch({ type: \"create\", plan });\n  const updatePlanAction = (old_plan, new_plan) =>\n    dispatch({ type: \"update\", old_plan, new_plan });\n  const deletePlanAction = plan => dispatch({ type: \"delete\", plan });\n  return [state, createPlanAction, updatePlanAction, deletePlanAction];\n}\n\nexport default useCropPlanReducer;\n","import React, { useState, useCallback } from \"react\";\nimport Season from \"./Season\";\nimport PlanEditor from \"./PlanEditor\";\nimport Drawer from \"./components/Drawer\";\nimport NumberInput from \"./form/NumberInput\";\nimport useCropPlanReducer from \"./utils/useCropPlanReducer\";\n\nconst seasons = [\n  { name: \"spring\", start: 0 },\n  { name: \"summer\", start: 28 },\n  { name: \"fall\", start: 56 },\n  { name: \"winter\", start: 84 }\n];\n\nexport default function Calendar() {\n  const [season, setSeason] = useState(0);\n  const [day, setDay] = useState(0);\n  const [plans, createPlan, updatePlan, deletePlan] = useCropPlanReducer([]);\n  const [visible, setVisible] = useState(true);\n  const open = useCallback(() => setVisible(true), []);\n  const close = useCallback(() => setVisible(false), []);\n\n  return (\n    <>\n      <NumberInput\n        value={season}\n        handleValue={setSeason}\n        isNullable={false}\n        max={3}\n      />\n\n      <Season\n        season={seasons[season]}\n        day={day}\n        plans={plans}\n        setDay={setDay}\n      />\n      <Drawer visible={visible} onOpen={open} onClose={close}>\n        <PlanEditor\n          key={day}\n          date={day}\n          plans={plans}\n          createPlan={createPlan}\n          updatePlan={updatePlan}\n          deletePlan={deletePlan}\n        />\n      </Drawer>\n    </>\n  );\n}\n","import React from \"react\";\nimport Calendar from \"./Calendar\";\n\nclass App extends React.Component {\n  render() {\n    return <Calendar />;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}