{"version":3,"sources":["ActionImage.js","ActionDisplay.js","Day.style.js","Day.js","Season.style.js","Season.js","form/NumberInput.js","form/FertilizerRadio.js","utils/CropPlan.js","form/PlanDetails.js","form/useAmountState.js","form/CropSelect.js","CreateCropPlanForm.js","UpdateCropPlanForm.js","PlanEditor.js","components/Drawer.js","utils/planReducer.js","utils/useCropPlanReducer.js","Calendar.js","App.js","index.js"],"names":["React","memo","_ref","action","props","Object","objectWithoutProperties","react_default","a","createElement","assign","alt","height","type","src","concat","crop","id","name","getSourceAndAlt","Special","styled","div","_templateObject","image","src_ActionImage","Fragment","quantity","Style","Container","withConfig","displayName","componentId","Header","Body","Box","day","selected","_ref$actions","actions","setDay","handleClick","useCallback","Day_style","onClick","map","key","src_ActionDisplay","BaseBlock","Title","Block","header","Season_style","season","current_day","days","range","start","body","useMemo","index","src_Day","value","handleValue","_ref$isNullable","isNullable","_ref$max","max","Number","MAX_SAFE_INTEGER","attrs","isInteger","onChange","e","number","parseInt","target","replace","isNaN","tag","handleChange","fertilizers","fertilizer_radios","fertilizer","checked","htmlFor","CropPlan","_this","this","_ref$replant","replant","start_date","end_date","classCallCheck","shouldReplant","growth","isPlantDate","date","getCropGrowth","regrowth","isHarvestDate","getAction","getCropActionsOnDate","isPlant","isHarvest","push","getActionsInRange","end","reduce","dates","split","_ref2","objectSpread","undefined","debug","stringy","console","log","JSON","stringify","planA","planB","compare","Error","same","start_date_compare","crop_compare","localeCompare","fertilizer_compare","end_date_compare","plan","handleSubmit","_useAmountState","price","reducer","state","Math","floor","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","updateQuantity","updated_quantity","updatePrice","updated_price","useAmountState","buy","_useAmountState2","setQuantity","setPrice","_useState","useState","_useState2","setFertilizer","_useState3","_useState4","setReplant","submit","preventDefault","toggleReplant","onSubmit","form_NumberInput","form_FertilizerRadio","crops","crop_options","findIndex","none","createPlan","filtered_crops","filter","setCrop","form_CropSelect","form_PlanDetails","updatePlan","deletePlan","updated_plan","remove","PlanEditor_templateObject","_templateObject2","plans","editable_plans","UpdateCropPlanForm","src_CreateCropPlanForm","StyledDrawer","StyledHandle","StyledContent","visible","container","document","onOpen","onClose","children","useEffect","appendChild","handleToggle","ReactDOM","createPortal","created_plan","same_plan","new_state","merge","toConsumableArray","sort","deleted_plan","equal","planReducer","new_plan","old_plan","useCropPlanReducer","initialState","arguments","length","seasons","usePlansForActions","Array","from","flatMap","uniques","unique","get","set","Map","values","events","getActionsOnDate","setSeason","_useCropPlanReducer","_useCropPlanReducer2","_useState5","_useState6","setVisible","open","close","handleSeasonClick","season_picker","capitalize","src_Season","components_Drawer","src_PlanEditor","App","src_Calendar","Component","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1a429cb8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction getSourceAndAlt(action) {\n  switch (action.type) {\n    case \"plant\":\n      return {\n        src: `/images/seeds/${action.crop.id}.png`,\n        alt: action.crop.id\n      };\n    case \"harvest\":\n      return {\n        src: `/images/crops/${action.crop.id}.png`,\n        alt: action.crop.id\n      };\n    case \"festival\":\n      return {\n        src: `/images/events/festival.gif`,\n        alt: action.name\n      };\n    case \"birthday\":\n      return {\n        src: `/images/events/${action.id}.png`,\n        alt: action.name\n      };\n    default:\n      return;\n  }\n}\n\nfunction ActionImage({ action, ...props }) {\n  return <img alt=\"\" height={20} {...getSourceAndAlt(action)} {...props} />;\n}\n\nexport default React.memo(ActionImage);\n","import React from \"react\";\nimport ActionImage from \"./ActionImage\";\nimport styled from \"styled-components\";\n\nconst Special = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\n\nconst ActionDisplay = ({ action }) => {\n  const image = <ActionImage action={action} />;\n  if (action.type === \"plant\" || action.type === \"harvest\")\n    return (\n      <>\n        {image}\n        {`x ${action.quantity}`}\n      </>\n    );\n  else return <Special> {image} </Special>;\n};\n\nexport default React.memo(ActionDisplay);\n","import styled from \"styled-components/macro\";\n\nconst Style = {\n  Container: styled.div`\n    position: relative;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-flow: column nowrap;\n  `,\n  Header: styled.div`\n    height: 35px;\n  `,\n  Body: styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: start;\n    overflow: auto;\n  `,\n\n  Box: styled.div`\n    flex: 1;\n  `\n};\n\nexport default Style;\n","import React, { useCallback } from \"react\";\nimport ActionDisplay from \"./ActionDisplay\";\nimport Style from \"./Day.style\";\n\nfunction Day({ day, selected, actions = [], setDay }) {\n  const handleClick = useCallback(\n    () => {\n      setDay(day);\n    },\n    [day]\n  );\n\n  return (\n    <Style.Container selected={selected} onClick={handleClick}>\n      <Style.Header>{(day + 1) % 28}</Style.Header>\n      <Style.Body>\n        {actions.map(action => (\n          <Style.Box key={action.id}>\n            <ActionDisplay action={action} />\n          </Style.Box>\n        ))}\n      </Style.Body>\n    </Style.Container>\n  );\n}\n\nexport default React.memo(Day);\n","import styled from \"styled-components/macro\";\n\nconst BaseBlock = styled.div`\n  flex: 1 1 13%;\n  border: 1px solid whitesmoke;\n`;\n\nconst Style = {\n  Container: styled.div`\n    display: flex;\n    flex-flow: row wrap;\n    width: 100%;\n  `,\n  Title: styled.div`\n    width: 100%;\n    text-align: center;\n    font-size: 2em;\n  `,\n  Header: styled(BaseBlock)`\n    text-align: center;\n    font-size: 1.2em;\n  `,\n  Block: styled(BaseBlock)`\n    height: 15vh;\n    border: ${props =>\n      props.selected ? \"1px solid black\" : \"1px solid whitesmoke\"};\n    background-color: ${props => (props.selected ? \"whitesmoke\" : \"none\")};\n  `\n};\n\nexport default Style;\n","import React, { useMemo } from \"react\";\nimport { range } from \"lodash\";\n\nimport Day from \"./Day\";\nimport Style from \"./Season.style\";\n\nconst day_names = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\"\n];\n\nconst header = day_names.map(day => (\n  <Style.Header key={day}>{day}</Style.Header>\n));\n\nfunction Season({ season, day: current_day, actions, setDay }) {\n  const days = range(season.start, season.start + 28);\n\n  const body = useMemo(\n    () =>\n      days.map((day, index) => (\n        <Style.Block key={day} selected={day === current_day}>\n          <Day key={day} day={day} setDay={setDay} actions={actions[index]} />\n        </Style.Block>\n      )),\n    [current_day, actions]\n  );\n\n  return (\n    <Style.Container>\n      <Style.Title>{season.name}</Style.Title>\n      {header}\n      {body}\n    </Style.Container>\n  );\n}\n\nexport default React.memo(Season);\n","import React from \"react\";\n\n// A Input for positive numbers that can be null\n// Useful for inputs with a placeholder\nfunction NumberInput({\n  value,\n  handleValue,\n  isNullable = true,\n  max = Number.MAX_SAFE_INTEGER,\n  ...attrs\n}) {\n  function handleChange(e) {\n    const number = Number.parseInt(e.target.value.replace(/\\D/, \"\"), 10);\n\n    if (Number.isNaN(number)) {\n      handleValue(isNullable ? null : 0);\n    } else {\n      handleValue(number < max ? number : max);\n    }\n  }\n\n  return (\n    <input\n      type=\"text\"\n      value={Number.isInteger(value) ? value : \"\"}\n      onChange={handleChange}\n      {...attrs}\n    />\n  );\n}\n\nexport default React.memo(NumberInput);\n","import React, { useCallback } from \"react\";\nimport fertilizers from \"../data/fertilizers\";\n\nfunction FertilizerRadio({ value, handleValue, tag }) {\n  const handleChange = useCallback(\n    e => handleValue(fertilizers[e.target.value]),\n    []\n  );\n\n  const fertilizer_radios = fertilizers.map((fertilizer, index) => (\n    <React.Fragment key={fertilizer.id}>\n      <input\n        type=\"radio\"\n        id={fertilizer.id + \"-\" + tag}\n        name={\"fertilizer-\" + tag}\n        value={index}\n        checked={fertilizer === value}\n        onChange={handleChange}\n      />\n      <label htmlFor={fertilizer.id + \"-\" + tag}>{fertilizer.name}</label>\n    </React.Fragment>\n  ));\n\n  return <>{fertilizer_radios}</>;\n}\n\nexport default React.memo(FertilizerRadio);\nexport const none = fertilizers[0];\n","import { range } from \"lodash\";\n\nexport default class CropPlan {\n  constructor({\n    crop,\n    fertilizer,\n    quantity,\n    replant = false,\n    start_date,\n    end_date\n  }) {\n    Object.assign(this, {\n      crop,\n      fertilizer,\n      quantity,\n      start_date: start_date,\n      end_date:\n        replant || crop.regrowth\n          ? crop.end\n          : replant === false\n          ? start_date + CropPlan.getCropGrowth(crop, fertilizer)\n          : end_date\n    });\n  }\n\n  static getCropGrowth(crop, fertilizer) {\n    return crop.growth;\n  }\n\n  static merge(planA, planB) {\n    if (CropPlan.compare(planA, planB))\n      throw new Error(\n        \"Plans must have equal dates, crop, and fertilizer to merge\"\n      );\n    const { quantity, ...same } = planA;\n    return new CropPlan({ quantity: quantity + planB.quantity, ...same });\n  }\n\n  // Compares data that cannot be merged - i.e. dates, crop, and fertilizer\n  static compare(planA, planB) {\n    const start_date_compare = planA.start_date - planB.start_date;\n    const crop_compare = planA.crop.id.localeCompare(planB.crop.id);\n    const fertilizer_compare = planA.fertilizer.id.localeCompare(\n      planB.fertilizer.id\n    );\n    const end_date_compare = planA.end_date - planB.end_date;\n\n    if (start_date_compare > 0) return 1;\n    else if (start_date_compare < 0) return -1;\n    else if (crop_compare > 0) return 1;\n    else if (crop_compare < 0) return -1;\n    else if (fertilizer_compare > 0) return 1;\n    else if (fertilizer_compare < 0) return -1;\n    else if (end_date_compare > 0) return 1;\n    else if (end_date_compare < 0) return -1;\n    else return 0;\n  }\n\n  static equal(planA, planB) {\n    const isSame = CropPlan.compare(planA, planB) === 0;\n    return isSame && planA.quantity - planB.quantity === 0;\n  }\n\n  shouldReplant = () => {\n    return this.start_date + this.crop.growth !== this.end_date;\n  };\n\n  get id() {\n    return `${this.crop.id}-${this.fertilizer.id}-${this.quantity}-(${\n      this.start_date\n    }-${this.end_date})`;\n  }\n\n  isPlantDate = date => {\n    const growth = CropPlan.getCropGrowth(this.crop, this.fertilizer);\n    const inPlan = this.start_date <= date && date + growth <= this.end_date;\n\n    return (\n      inPlan &&\n      (this.crop.regrowth\n        ? date === this.start_date\n        : (date - this.start_date) % growth === 0)\n    );\n  };\n\n  isHarvestDate = date => {\n    const growth = CropPlan.getCropGrowth(this.crop, this.fertilizer);\n    const inPlan = this.start_date <= date - growth && date <= this.end_date;\n\n    return (\n      inPlan &&\n      (this.crop.regrowth\n        ? date === this.start_date + growth ||\n          (date - this.start_date - growth) % this.crop.regrowth === 0\n        : (date - this.start_date - growth) % growth === 0)\n    );\n  };\n\n  getAction = (date, type) => ({\n    id: `${type}-${this.crop.id}-${date}`,\n    date: date,\n    type: type,\n    crop: this.crop,\n    quantity: this.quantity\n  });\n\n  getCropActionsOnDate = date => {\n    const actions = [];\n    const isPlant = this.isPlantDate(date);\n    const isHarvest = this.isHarvestDate(date);\n    if (isPlant) actions.push(this.getAction(date, \"plant\"));\n    if (isHarvest) actions.push(this.getAction(date, \"harvest\"));\n    return actions;\n  };\n\n  getActionsInRange = (start, end) => {\n    if (start > this.end_date || end < this.start_date) return [];\n    return range(start, end).reduce((dates, date) => {\n      if (this.isPlantDate(date)) dates.push(this.getAction(date, \"plant\"));\n      if (this.isHarvestDate(date)) dates.push(this.getAction(date, \"harvest\"));\n      return dates;\n    }, []);\n  };\n\n  split = (date, { fertilizer, quantity, replant }) => {\n    const before = new CropPlan({ ...this, end_date: date });\n    const after = new CropPlan({\n      start_date: date,\n      fertilizer: fertilizer || this.fertilizer,\n      crop: this.crop,\n      quantity: quantity || this.quantity,\n      replant: replant === undefined ? this.shouldReplant() : replant\n    });\n    return [before, after];\n  };\n\n  debug = () => {\n    const stringy = { ...this };\n    stringy.fertilizer = this.fertilizer.id;\n    stringy.crop = this.crop.id;\n    console.log(JSON.stringify(stringy, null, 2));\n  };\n}\n","import React, { useState, useCallback } from \"react\";\nimport useAmountState from \"./useAmountState\";\nimport NumberInput from \"./NumberInput\";\nimport FertilizerRadio from \"./FertilizerRadio\";\nimport CropPlan from \"../utils/CropPlan\";\n\nfunction PlanDetails({ date, plan, handleSubmit }) {\n  const [quantity, price, setQuantity, setPrice] = useAmountState(\n    plan.quantity,\n    plan.crop.buy\n  );\n  const [fertilizer, setFertilizer] = useState(plan.fertilizer);\n  const [replant, setReplant] = useState(plan.shouldReplant());\n\n  const submit = useCallback(e => {\n    e.preventDefault();\n    handleSubmit(\n      new CropPlan({\n        crop: plan.crop,\n        quantity,\n        fertilizer,\n        replant,\n        start_date: date\n      })\n    );\n  });\n\n  const toggleReplant = useCallback(e => setReplant(!replant), [replant]);\n\n  return (\n    <form onSubmit={submit}>\n      <NumberInput value={quantity} handleValue={setQuantity} />\n      <NumberInput value={price} handleValue={setPrice} />\n      <FertilizerRadio\n        value={fertilizer}\n        handleValue={setFertilizer}\n        tag={plan.id}\n      />\n      {!plan.crop.regrowth && (\n        <input type=\"checkbox\" checked={replant} onChange={toggleReplant} />\n      )}\n      <button>Submit</button>\n    </form>\n  );\n}\n\nexport default React.memo(PlanDetails);\n","import { useReducer, useCallback } from \"react\";\n\nexport default function useAmountState(quantity, price) {\n  const reducer = useCallback(\n    (state, action) => {\n      switch (action.type) {\n        case \"price\":\n          return {\n            price: action.price,\n            quantity: Math.floor(action.price / price)\n          };\n        case \"quantity\":\n          return { price: price * action.quantity, quantity: action.quantity };\n        default:\n          return state;\n      }\n    },\n    [price]\n  );\n\n  const [state, dispatch] = useReducer(reducer, {\n    quantity,\n    price: quantity * price\n  });\n\n  const updateQuantity = useCallback(updated_quantity =>\n    dispatch({ type: \"quantity\", quantity: updated_quantity })\n  );\n\n  const updatePrice = useCallback(updated_price =>\n    dispatch({ type: \"price\", price: updated_price })\n  );\n\n  return [state.quantity, state.price, updateQuantity, updatePrice];\n}\n","import React from \"react\";\n\nfunction CropSelect({ value, handleValue, crops }) {\n  const handleCropChange = e => {\n    handleValue(crops[e.target.value]);\n  };\n\n  const crop_options = crops.map((crop, index) => (\n    <option key={crop.id} value={index}>\n      {crop.name}\n    </option>\n  ));\n\n  const index = crops.findIndex(crop => crop === value);\n\n  return (\n    <select onChange={handleCropChange} value={index}>\n      <option key={-1} value={-1}>\n        Select a Crop\n      </option>\n      {crop_options}\n    </select>\n  );\n}\n\nexport default React.memo(CropSelect);\n","import React, { useState, useMemo } from \"react\";\nimport crops from \"./data/crops\";\nimport PlanDetails from \"./form/PlanDetails\";\nimport CropSelect from \"./form/CropSelect\";\nimport fertilizers from \"./data/fertilizers\";\n\nconst none = fertilizers[0];\nfunction CreateCropPlanForm({ date, createPlan }) {\n  const filtered_crops = useMemo(\n    () =>\n      crops.filter(\n        crop => date >= crop.start && date + crop.growth <= crop.end\n      ),\n    [date]\n  );\n\n  const [crop, setCrop] = useState(null);\n  const plan = {\n    id: \"create\",\n    crop,\n    quantity: 1,\n    fertilizer: none,\n    shouldReplant: () => false\n  };\n\n  return (\n    <>\n      <CropSelect value={crop} handleValue={setCrop} crops={filtered_crops} />\n      {crop && (\n        <PlanDetails\n          key={crop.id}\n          date={date}\n          plan={plan}\n          handleSubmit={createPlan}\n        />\n      )}\n    </>\n  );\n}\n\nexport default React.memo(CreateCropPlanForm);\n","import React, { useCallback } from \"react\";\nimport PlanDetails from \"./form/PlanDetails\";\n\nfunction UpdatePlanForm({ date, plan, updatePlan, deletePlan }) {\n  const submit = useCallback(updated_plan => updatePlan(plan, updated_plan), [\n    plan\n  ]);\n\n  const remove = useCallback(() => deletePlan(plan), [plan]);\n\n  return (\n    <>\n      {plan.crop.name}\n      <PlanDetails date={date} plan={plan} handleSubmit={submit} />\n      <button onClick={remove}>Remove</button>\n    </>\n  );\n}\n\nexport default React.memo(UpdatePlanForm);\n","import React, { useMemo } from \"react\";\nimport CreateCropPlanForm from \"./CreateCropPlanForm\";\nimport UpdateCropPlanForm from \"./UpdateCropPlanForm\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n`;\n\nconst Box = styled.div`\n  flex: 1;\n`;\n\nfunction PlanEditor({ date, plans, createPlan, updatePlan, deletePlan }) {\n  const editable_plans = useMemo(\n    () =>\n      plans\n        .filter(plan => plan.isPlantDate(date))\n        .map(plan => (\n          <Box key={plan.id}>\n            <UpdateCropPlanForm\n              date={date}\n              plan={plan}\n              updatePlan={updatePlan}\n              deletePlan={deletePlan}\n            />\n          </Box>\n        )),\n    [date, plans]\n  );\n\n  return (\n    <Container>\n      <Box>\n        <CreateCropPlanForm date={date} createPlan={createPlan} />\n      </Box>\n      {editable_plans}\n    </Container>\n  );\n}\n\nexport default React.memo(PlanEditor);\n","import React, { useEffect, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components/macro\";\n\nconst StyledDrawer = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100vw;\n  display: flex;\n  flex-flow: column nowrap;\n`;\nconst StyledHandle = styled.div`\n  align-self: center;\n  background-color: WhiteSmoke;\n`;\n\nconst StyledContent = styled.div`\n  display: ${props => (props.visible ? \"flex\" : \"none\")};\n  flex: 1;\n  padding: 5vh;\n  background-color: WhiteSmoke;\n`;\n\nconst container = document.createElement(\"div\");\nfunction Drawer({ visible, onOpen, onClose, children }) {\n  useEffect(() => {\n    document.body.appendChild(container);\n  }, []);\n\n  const handleToggle = useCallback(() => {\n    if (visible) onClose();\n    else onOpen();\n  });\n\n  return ReactDOM.createPortal(\n    <StyledDrawer>\n      <StyledHandle onClick={handleToggle}> handle</StyledHandle>\n      <StyledContent visible={visible}>{children}</StyledContent>\n    </StyledDrawer>,\n    container\n  );\n}\n\nexport default React.memo(Drawer);\n","import CropPlan from \"./CropPlan.js\";\n\nfunction planReducer(state, action) {\n  switch (action.type) {\n    case \"create\":\n      return createPlan(action.plan, state);\n    case \"update\":\n      return createPlan(action.new_plan, deletePlan(action.old_plan, state));\n    case \"delete\":\n      return deletePlan(action.plan, state);\n    default:\n      return state;\n  }\n}\n\nfunction createPlan(created_plan, state) {\n  const index = state.findIndex(\n    plan => CropPlan.compare(plan, created_plan) === 0\n  );\n\n  if (index >= 0) {\n    const same_plan = state[index];\n    const plans = state.filter(\n      plan => CropPlan.compare(plan, created_plan) !== 0\n    );\n    const merged_crop = CropPlan.merge(same_plan, created_plan);\n    const new_state = [merged_crop, ...plans];\n    new_state.sort(CropPlan.compare);\n    return new_state;\n  }\n\n  const new_state = [created_plan, ...state];\n  new_state.sort(CropPlan.compare);\n  return new_state;\n}\n\nfunction deletePlan(deleted_plan, state) {\n  return state.filter(plan => !CropPlan.equal(plan, deleted_plan));\n}\n\nexport default planReducer;\n","import { useReducer } from \"react\";\nimport planReducer from \"./planReducer\";\n\nfunction useCropPlanReducer(initialState = []) {\n  const [state, dispatch] = useReducer(planReducer, initialState);\n  const createPlanAction = plan => dispatch({ type: \"create\", plan });\n  const updatePlanAction = (old_plan, new_plan) =>\n    dispatch({ type: \"update\", old_plan, new_plan });\n  const deletePlanAction = plan => dispatch({ type: \"delete\", plan });\n  return [state, createPlanAction, updatePlanAction, deletePlanAction];\n}\n\nexport default useCropPlanReducer;\n","import React, { useState, useCallback, useMemo } from \"react\";\nimport Season from \"./Season\";\nimport PlanEditor from \"./PlanEditor\";\nimport Drawer from \"./components/Drawer\";\nimport useCropPlanReducer from \"./utils/useCropPlanReducer\";\nimport { capitalize, range } from \"lodash\";\nimport events from \"./data/events\";\nconst seasons = [\n  { name: \"spring\", start: 0 },\n  { name: \"summer\", start: 28 },\n  { name: \"fall\", start: 56 },\n  { name: \"winter\", start: 84 }\n];\n\nfunction getActionsOnDate(date, plans) {\n  const actions = Array.from(\n    plans\n      .flatMap(plan => plan.getCropActionsOnDate(date))\n      .reduce((uniques, action) => {\n        const unique = uniques.get(action.id);\n        if (unique) {\n          unique.quantity += action.quantity;\n        } else {\n          uniques.set(action.id, action);\n        }\n        return uniques;\n      }, new Map())\n      .values()\n  );\n  if (events[date]) return [...events[date], ...actions];\n  return actions;\n}\n\nfunction usePlansForActions(plans, season) {\n  return useMemo(\n    () =>\n      range(season.start, season.start + 28).map(day =>\n        getActionsOnDate(day, plans)\n      ),\n    [plans, season]\n  );\n}\n\nfunction Calendar() {\n  const [season, setSeason] = useState(0);\n  const [day, setDay] = useState(0);\n  const [plans, createPlan, updatePlan, deletePlan] = useCropPlanReducer([]);\n  const actions = usePlansForActions(plans, seasons[season]);\n  const [visible, setVisible] = useState(true);\n  const open = useCallback(() => setVisible(true), []);\n  const close = useCallback(() => setVisible(false), []);\n\n  function handleSeasonClick(e) {\n    setDay(e.target.value * 28);\n    setSeason(e.target.value);\n  }\n\n  const season_picker = seasons.map((season, index) => (\n    <button key={season.name} onClick={handleSeasonClick} value={index}>\n      {capitalize(season.name)}\n    </button>\n  ));\n\n  return (\n    <>\n      {season_picker}\n      <Season\n        season={seasons[season]}\n        day={day}\n        actions={actions}\n        setDay={setDay}\n      />\n      <Drawer visible={visible} onOpen={open} onClose={close}>\n        <PlanEditor\n          key={day}\n          date={day}\n          plans={plans}\n          createPlan={createPlan}\n          updatePlan={updatePlan}\n          deletePlan={deletePlan}\n        />\n      </Drawer>\n    </>\n  );\n}\n\nexport default React.memo(Calendar);\n","import React from \"react\";\nimport Calendar from \"./Calendar\";\n\nclass App extends React.Component {\n  render() {\n    return <Calendar />;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}